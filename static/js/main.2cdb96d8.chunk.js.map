{"version":3,"sources":["index.js"],"names":["Token","props","id","value","className","src","correctAnswer","alt","onClick","answerSelected","Card","Board","handleClick","e","btn","target","console","log","cardName","deck","state","cardNumber","document","getElementById","classList","add","setState","answer","substring","lastIndexOf","setTimeout","showAnswer","handleCardClick","updateScore","nextCardNumber","overlays","getElementsByClassName","forEach","el","remove","tokenName","this","tokensList","map","token","renderToken","score","React","Component","getShuffledPile","arr","newArr","slice","i","length","rand","Math","floor","random","getPile","pileSize","pileName","pile","push","getShuffledDeck","pileSizes","pileNames","piles","prevAnswer","j","currIndexes","CatMouseGame","bigMode","newScore","ReactDOM","render","basename","ProcessingInstruction","env","PUBLIC_URL"],"mappings":"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","file":"static/js/main.2cdb96d8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter } from 'react-router-dom';\n\nfunction Token(props) {\n  return (\n    <div key={props.value + \"-token\"}> \n      <button id={props.value + \"-btn\"} className=\"token-btn\" >\n        <div id={props.value + \"_overlay\"} className=\"overlay\"><img id={props.value + \"_overlay\"} src={props.correctAnswer === props.value ? (\"/images/good.png\") : \"/images/bad.png\"} alt=\"result\"/></div>\n        <img id={props.value} src={\"/images/tokens/\" + props.value + \"_btn.png\"} alt={props.value} onClick={props.answerSelected ? () => {} : props.onClick}/>\n      </button>\n    </div>\n  );\n  \n}\n\nfunction Card(props) {\n  return (\n    <div className=\"card\" key={props.value + \"-card\"}> \n      <img id={props.value + \"-card\"} src={props.value} alt=\"current_card\" onClick={props.onClick}/>\n    </div>\n  );\n}\n\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cardNumber: 0,\n      answerSelected: false,\n      correctAnswer: \"\",\n      showAnswer: false,\n    };\n  }\n\n  handleClick = (e) => {\n    let btn = e.target.id;\n    console.log(\"I clicked \" + btn);\n    let cardName = this.props.deck[this.state.cardNumber];\n    const overlay = document.getElementById(btn + '_overlay');\n    overlay.classList.add('active-overlay');\n    this.setState({answerSelected: true});\n    var answer = cardName.substring(\n      cardName.lastIndexOf(\"_\") + 1, \n      cardName.lastIndexOf(\".\")\n    );\n    this.setState({correctAnswer: answer});\n    setTimeout(() => {\n      this.setState({showAnswer: true});\n    }, 500);\n    setTimeout(() => {\n      this.handleCardClick();\n    }, 3000);\n    if(btn === answer) {\n      console.log(\"I got it right!\");\n      this.props.updateScore();\n    } else {\n      console.log(\"I got it wrong!\");\n    }\n  }\n\n  handleCardClick = () => {\n    console.log(\"CHANGING CARD\");\n    const nextCardNumber = this.state.cardNumber+1;\n    this.setState({showAnswer: false, cardNumber: nextCardNumber, answerSelected: false});\n    const overlays = document.getElementsByClassName('active-overlay');\n    [...overlays].forEach((el) => el.classList.remove('active-overlay'));\n  }\n  // handleCardClick(e) {\n  //   console.log(\"CHANGING CARD\");\n  //   const nextCardNumber = this.state.cardNumber+1;\n  //   this.setState({cardNumber: nextCardNumber});\n  // }\n\n  renderToken(tokenName) {  \n    return (\n      <Token \n        value={tokenName} \n        onClick={(e) => this.handleClick(e)}\n        answerSelected={this.state.answerSelected}\n        correctAnswer={this.state.correctAnswer}\n      />\n    );\n  }\n\n  render() {\n    const tokens = [\"mouse\", \"cat\", \"cheese\", \"ball\", \"pillow\"];\n    var tokensList = tokens.map((token) => this.renderToken(token));\n\n    return (\n      <div className=\"board-row\">\n        <div className=\"game-field\">\n          <Card \n            value={\"/images/front/\" + this.props.deck[this.state.cardNumber]}\n            onClick={this.handleCardClick}\n          />\n        </div>\n        <div>\n        <div className=\"game-info\">\n          <div id=\"score\"> \n            Score: {this.props.score}\n          </div>\n          <div id=\"answer\"> \n            Correct answer:\n          </div>\n          \n          <div className=\"answer\">\n            {this.state.showAnswer ? \n            <Card \n              value={\"/images/back/\" + this.state.correctAnswer + \".png\"}\n              onClick={this.handleCardClick}\n            /> : \"\"}\n            \n          </div>\n        </div>\n        </div>\n        <div>\n          {tokensList}\n        </div>\n      </div>\n    );\n  }\n}\nconst getShuffledPile = arr => {\n  const newArr = arr.slice()\n  for (let i = newArr.length - 1; i > 0; i--) {\n      const rand = Math.floor(Math.random() * (i + 1));\n      [newArr[i], newArr[rand]] = [newArr[rand], newArr[i]];\n  }\n  return newArr\n};\n\nfunction getPile(pileSize, pileName) {\n  let pile = [];\n  for (let i = 0; i < pileSize; i++) {\n    pile.push(\"catmouse\" + (i + 1) + \"_\" + pileName + \".png\");\n  }\n  pile = getShuffledPile(pile);\n  return pile;\n}\n\nfunction getShuffledDeck() {\n  let deck = [];\n  let pileSizes = [10, 13, 11, 11, 11];\n  let deckSize = 56; // add up all pile sizes\n  let pileNames = [\"mouse\", \"cat\", \"cheese\", \"ball\", \"pillow\"];\n  let piles = [];\n  for (let i = 0; i < 5; i++) {\n    piles.push(getPile(pileSizes[i], pileNames[i]))\n  }\n  let prevAnswer = \"\";\n  let j = Math.floor(Math.random() * 5); // 0 to 4 as how many different answers\n  let currIndexes = [0, 0, 0, 0, 0];\n  for (let i = 0; i < deckSize; i++ ) {\n    while(pileNames[j] === prevAnswer) {\n      j = Math.floor(Math.random() * 5);\n    }\n    \n    deck.push(piles[j][currIndexes[j]]);\n\n    if (currIndexes[j] === piles[j].length - 1) {\n      piles[j] = getShuffledPile(piles[j]);\n    }\n    currIndexes[j] = (currIndexes[j] + 1) % piles[j].length;\n    prevAnswer = pileNames[j];\n  }\n  return deck;\n}\n\nclass CatMouseGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: getShuffledDeck(),\n      score: 0,\n      bigMode: false,\n    }\n  }\n\n  updateScore() {\n    console.log(\"Updating score\");\n    let newScore = this.state.score + 1;\n    this.setState({score: newScore});\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            deck={this.state.deck}\n            updateScore={() => this.updateScore()}\n            score={this.state.score}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <HashRouter basename={ProcessingInstruction.env.PUBLIC_URL}>\n    <CatMouseGame />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}